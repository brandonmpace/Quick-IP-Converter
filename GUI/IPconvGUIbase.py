#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.0 on Wed Feb  6 21:35:43 2019
#

import wx
import wx.adv

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from .resources import *

# Copyright (C) 2014, 2018 Brandon M. Pace
#
# This file is part of Quick IP Converter
#
# Quick IP Converter is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Quick IP Converter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Quick IP Converter.
# If not, see <https://www.gnu.org/licenses/>.
# end wxGlade


class BaseConverterFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BaseConverterFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CLIP_CHILDREN | wx.STAY_ON_TOP | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_main = wx.Panel(self, wx.ID_ANY, style=wx.CLIP_CHILDREN)
        # Fix issue on Windows where widgets and text flicker when the mouse passes over them
        self.panel_main.SetDoubleBuffered(True)
        self.checkbox_reverse = wx.CheckBox(self.panel_main, wx.ID_ANY, "Reverse", style=wx.ALIGN_RIGHT)
        self.bitmap_button_settings = wx.BitmapButton(self.panel_main, wx.ID_ANY, SettingsIcon.GetBitmap(), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.bitmap_button_exit = wx.BitmapButton(self.panel_main, wx.ID_ANY, ExitIcon.GetBitmap(), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.label_dotted = wx.StaticText(self.panel_main, wx.ID_ANY, "IP:", style=wx.ALIGN_RIGHT)
        self.text_ctrl_dotted = wx.TextCtrl(self.panel_main, wx.ID_ANY, "")
        self.label_hex = wx.StaticText(self.panel_main, wx.ID_ANY, "Hex:", style=wx.ALIGN_RIGHT)
        self.text_ctrl_hex = wx.TextCtrl(self.panel_main, wx.ID_ANY, "")
        self.label_dec = wx.StaticText(self.panel_main, wx.ID_ANY, "Dec:")
        self.text_ctrl_dec = wx.TextCtrl(self.panel_main, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.on_checkbox_reverse, self.checkbox_reverse)
        self.Bind(wx.EVT_BUTTON, self.on_button_settings, self.bitmap_button_settings)
        self.Bind(wx.EVT_BUTTON, self.on_button_exit, self.bitmap_button_exit)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: BaseConverterFrame.__set_properties
        self.SetTitle("Quick IP Converter")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(IPconvIcon.GetBitmap())
        self.SetIcon(_icon)
        self.checkbox_reverse.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.checkbox_reverse.SetForegroundColour(wx.Colour(0, 0, 0))
        self.checkbox_reverse.SetToolTip("Reverse the byte order during conversion")
        self.bitmap_button_settings.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.bitmap_button_settings.SetToolTip("Settings")
        self.bitmap_button_settings.SetSize(self.bitmap_button_settings.GetBestSize())
        self.bitmap_button_exit.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.bitmap_button_exit.SetToolTip("Exit")
        self.bitmap_button_exit.SetSize(self.bitmap_button_exit.GetBestSize())
        self.label_dotted.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_dotted.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_dotted.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_dotted.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_dotted.SetToolTip("Dotted-quad IPv4 (e.g. 192.168.1.1)")
        self.label_hex.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_hex.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_hex.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_hex.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_hex.SetToolTip("Hexadecimal IP (e.g. c0a80101) or hexadecimal value")
        self.text_ctrl_hex.SetFocus()
        self.label_dec.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_dec.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_dec.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_dec.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_dec.SetToolTip("Decimal IP (e.g. 3232235777) or decimal value")
        self.panel_main.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.panel_main.SetForegroundColour(wx.Colour(0, 0, 0))
        self.panel_main.SetToolTip("Click and drag to move the window")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BaseConverterFrame.__do_layout
        sizer_main_outer = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_main = wx.GridBagSizer(0, 0)
        sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_main.Add(self.checkbox_reverse, (0, 0), (1, 2), wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_buttons.Add(self.bitmap_button_settings, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        sizer_buttons.Add(self.bitmap_button_exit, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.EXPAND | wx.LEFT, 2)
        grid_sizer_main.Add(sizer_buttons, (0, 3), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_dotted, (1, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_main.Add(self.text_ctrl_dotted, (1, 1), (1, 3), wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_hex, (2, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_main.Add(self.text_ctrl_hex, (2, 1), (1, 3), wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_dec, (3, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_main.Add(self.text_ctrl_dec, (3, 1), (1, 3), wx.EXPAND, 0)
        self.panel_main.SetSizer(grid_sizer_main)
        grid_sizer_main.AddGrowableCol(1)
        sizer_main_outer.Add(self.panel_main, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_main_outer)
        sizer_main_outer.Fit(self)
        self.Layout()
        # end wxGlade

    def on_checkbox_reverse(self, event):  # wxGlade: BaseConverterFrame.<event_handler>
        print("Event handler 'on_checkbox_reverse' not implemented!")
        event.Skip()

    def on_button_settings(self, event):  # wxGlade: BaseConverterFrame.<event_handler>
        print("Event handler 'on_button_settings' not implemented!")
        event.Skip()

    def on_button_exit(self, event):  # wxGlade: BaseConverterFrame.<event_handler>
        print("Event handler 'on_button_exit' not implemented!")
        event.Skip()

# end of class BaseConverterFrame

class BaseSettingsFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BaseSettingsFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLIP_CHILDREN | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.FRAME_TOOL_WINDOW | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.SYSTEM_MENU | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_settings = wx.Panel(self, wx.ID_ANY, style=wx.CLIP_CHILDREN)
        # Fix issue on Windows where widgets and text flicker when the mouse passes over them
        self.panel_settings.SetDoubleBuffered(True)
        self.checkbox_monitorclipboard = wx.CheckBox(self.panel_settings, wx.ID_ANY, "monitor clipboard")
        self.checkbox_stayontop = wx.CheckBox(self.panel_settings, wx.ID_ANY, "stay on top")
        self.radio_box_theme = wx.RadioBox(self.panel_settings, wx.ID_ANY, "theme", choices=["dark", "light"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.hyperlink_about = wx.adv.HyperlinkCtrl(self.panel_settings, wx.ID_ANY, "About this program", "", style=wx.adv.HL_ALIGN_CENTRE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.on_checkbox_monitorclipboard, self.checkbox_monitorclipboard)
        self.Bind(wx.EVT_CHECKBOX, self.on_checkbox_stayontop, self.checkbox_stayontop)
        self.Bind(wx.EVT_RADIOBOX, self.on_radiobox_theme, self.radio_box_theme)
        self.Bind(wx.adv.EVT_HYPERLINK, self.on_about, self.hyperlink_about)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: BaseSettingsFrame.__set_properties
        self.SetTitle("Settings")
        self.checkbox_monitorclipboard.SetToolTip("monitor clipboard every second for hex or dotted-quad values")
        self.checkbox_monitorclipboard.SetFocus()
        self.checkbox_stayontop.SetToolTip("always stay on top of other windows")
        self.checkbox_stayontop.SetValue(1)
        self.radio_box_theme.SetSelection(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BaseSettingsFrame.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_panel = wx.BoxSizer(wx.VERTICAL)
        sizer_panel.Add(self.checkbox_monitorclipboard, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        sizer_panel.Add(self.checkbox_stayontop, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        sizer_panel.Add(self.radio_box_theme, 0, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_panel.Add(self.hyperlink_about, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        self.panel_settings.SetSizer(sizer_panel)
        sizer_main.Add(self.panel_settings, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        sizer_main.Fit(self)
        self.Layout()
        # end wxGlade

    def on_checkbox_monitorclipboard(self, event):  # wxGlade: BaseSettingsFrame.<event_handler>
        print("Event handler 'on_checkbox_monitorclipboard' not implemented!")
        event.Skip()

    def on_checkbox_stayontop(self, event):  # wxGlade: BaseSettingsFrame.<event_handler>
        print("Event handler 'on_checkbox_stayontop' not implemented!")
        event.Skip()

    def on_radiobox_theme(self, event):  # wxGlade: BaseSettingsFrame.<event_handler>
        print("Event handler 'on_radiobox_theme' not implemented!")
        event.Skip()

    def on_about(self, event):  # wxGlade: BaseSettingsFrame.<event_handler>
        print("Event handler 'on_about' not implemented!")
        event.Skip()

# end of class BaseSettingsFrame

class IPConverterApp(wx.App):
    def OnInit(self):
        self.frame_main = BaseConverterFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame_main)
        self.frame_main.Show()
        return True

# end of class IPConverterApp

if __name__ == "__main__":
    app = IPConverterApp(0)
    app.MainLoop()
